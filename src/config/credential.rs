// Copyright 2023 The Amphitheatre Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use serde::{Deserialize, Serialize};

/// Abstract credentials that can be used for Docker registry, source code repositories,
/// or other addresses that need to be accessed, indicating basic authentication
/// when there is only a username and password, otherwise bearer authentication.
#[derive(Debug, Deserialize, Serialize)]
pub struct Credential {
    username: Option<String>,
    password: Option<String>,
    token: Option<String>,
}

impl Credential {
    /// Constructe a basic credential
    pub fn basic(username: String, password: String) -> Self {
        Self {
            username: Some(username),
            password: Some(password),
            token: None,
        }
    }

    /// Constructe a bearer credential
    pub fn bearer(token: String) -> Self {
        Self {
            username: None,
            password: None,
            token: Some(token),
        }
    }

    pub fn scheme(&self) -> Scheme {
        if self.username.is_none() && self.token.is_some() {
            Scheme::Bearer
        } else if self.username.is_some() && self.password.is_some() {
            Scheme::Basic
        } else {
            Scheme::Unknown
        }
    }

    pub fn username_any(&self) -> String {
        self.username.clone().unwrap_or_default()
    }

    pub fn password_any(&self) -> String {
        self.password.clone().unwrap_or_default()
    }

    pub fn token_any(&self) -> String {
        self.token.clone().unwrap_or_default()
    }
}

pub enum Scheme {
    /// Basic authentication is a simple authentication scheme built into the HTTP protocol.
    Basic,
    /// Bearer authentication (also called token authentication) is an HTTP authentication scheme
    /// that involves security tokens called bearer tokens. The name “Bearer authentication”
    /// can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string,
    /// usually generated by the server in response to a login request.
    Bearer,
    /// Username or token is empty, or other cases
    Unknown,
}
