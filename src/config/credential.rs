// Copyright 2023 The Amphitheatre Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use serde::{Deserialize, Serialize};

/// `Credential` is used to provide common methods for accessing credentials.
pub trait Credential {
    /// Get the username of the credential
    fn username(&self) -> Option<String>;
    /// Get the password of the credential
    fn password(&self) -> Option<String>;
    /// Get the token of the credential
    fn token(&self) -> Option<String>;

    fn username_any(&self) -> String {
        self.username().unwrap_or_default()
    }

    fn password_any(&self) -> String {
        self.password().unwrap_or_default()
    }

    fn token_any(&self) -> String {
        self.token().unwrap_or_default()
    }
}

/// `CredentialConfiguration` is used to store access credentials on the client side,
/// such as Docker registry and SCM credentials, and other propeaties
/// that need to be kept in sync with the server.
#[derive(Debug, Default, Deserialize, Serialize)]
pub struct CredentialConfiguration {
    /// Access credentials for multiple docker registries.
    pub registries: Vec<RegistryCredentialConfig>,
    /// Access credentials for multiple code repositories.
    pub repositories: Vec<RepositoryCredentialConfig>,
}

/// Access credentials for multiple docker registries.
/// indicating basic authentication when there is only a
/// username and password, otherwise bearer authentication.
#[derive(Debug, Default, Deserialize, Serialize)]
pub struct RegistryCredentialConfig {
    /// the name of the registry
    name: String,
    /// whether it is the default registry
    default: bool,
    /// server address
    server: String,
    /// the optional username of the registry
    username: Option<String>,
    /// the optional password of the registry
    password: Option<String>,
    /// the optional token of the registry
    token: Option<String>,
}

/// `RegistryCredentialConfig` implements `CredentialConfigTrait`
impl Credential for RegistryCredentialConfig {
    fn username(&self) -> Option<String> {
        self.username.to_owned()
    }

    fn password(&self) -> Option<String> {
        self.password.to_owned()
    }

    fn token(&self) -> Option<String> {
        self.token.to_owned()
    }
}

/// Access credentials for multiple code repositories.
/// indicating basic authentication when there is only a
/// username and password, otherwise bearer authentication.
#[derive(Debug, Default, Deserialize, Serialize)]
pub struct RepositoryCredentialConfig {
    /// the name of the repository
    name: String,
    /// the driver for connecting to the repository
    driver: String,
    /// server address of the repository
    server: String,
    /// the optional username of the repository
    username: Option<String>,
    /// the optional password of the repository
    password: Option<String>,
    /// the optional token of the repository
    token: Option<String>,
}

/// `RepositoryCredentialConfig` implements `CredentialConfigTrait`
impl Credential for RepositoryCredentialConfig {
    fn username(&self) -> Option<String> {
        self.username.to_owned()
    }

    fn password(&self) -> Option<String> {
        self.password.to_owned()
    }

    fn token(&self) -> Option<String> {
        self.token.to_owned()
    }
}

pub enum Scheme {
    /// Basic authentication is a simple authentication scheme built into the HTTP protocol.
    Basic,
    /// Bearer authentication (also called token authentication) is an HTTP authentication scheme
    /// that involves security tokens called bearer tokens. The name “Bearer authentication”
    /// can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string,
    /// usually generated by the server in response to a login request.
    Bearer,
    /// Username or token is empty, or other cases
    Unknown,
}

/// Get the authentication scheme based on the credential
pub fn scheme(credential: impl Credential) -> Scheme {
    if credential.username().is_none() && credential.token().is_some() {
        Scheme::Bearer
    } else if credential.username().is_some() && credential.password().is_some() {
        Scheme::Basic
    } else {
        Scheme::Unknown
    }
}
